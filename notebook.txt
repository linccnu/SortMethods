# python ftp website, which can open in browser and can download by wget tool
https://www.python.org/ftp/python/

# install pip or pip3
sudo apt-get install python-pip    #for pip
sudo apt-get install python3-pip   #for pip3
sudo pip3 list

# install java/jdk environment
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer  # while continue a long time, waiting...

# check jdk environment
java -version
javac -version

# set jdk environment path in ~/.bashrc, then source ~/.bashrc
export JAVA_HOME=/usr/lib/jvm/java-8-oracle
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH

# download pycharm-community software
http://www.jetbrains.com/pycharm/download/
sudo tar -xzvf pycharm-community-2018.2.4.tar.gz
sudo mv pycharm-community-2018.2.4 /usr/local/lib
sudo ln -s /usr/local/lib/pycharm-community-2018.2.4/bin/pycharm.sh /usr/bin/pycharm-community

# Using the third source to install pycharm-community
sudo add-apt-repository ppa:mystic-mirage/pycharm
sudo apt-get update
sudo apt-get install pycharm-community
# You can also download pycharm-community software in following website, and install it off-line
http://www.jetbrains.com/pycharm/download/#section=linux

[Error]:add-apt-repository: command not found
apt-get install software-properties-common python-software-properties


------------------------------------------------
dpkg -i **.deb  #dpkg install *** software
dpkg -r **.deb  #dpkg remove  *** software

# install anaconda
https://blog.csdn.net/qq_22080019/article/details/80249114

===========================install nvidia driver and cuda and cudnn version for GTX 960===================
# before installed, check the environment
lspci | grep -i nvidia
uname -m && cat /etc/*release
gcc --version
uname -r
sudo apt-get install linux-headers-$(uname -r)

# Add apt repository
sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt-get update

https://www.cnblogs.com/zengcv/p/6564517.html
https://www.cnblogs.com/jinggege/p/5766146.html
https://developer.nvidia.com/cuda-gpus


https://developer.nvidia.com/rdp/cudnn-archive
for GTX960, Compute Capability is 5.2, we download cudnn 5.x # web-link refre to https://developer.nvidia.com/cuda-gpus
https://developer.nvidia.com/cuda-toolkit-archive
for GTX960, CUDA 8.0 and cuDNN V5.1 is just ok.
# list your driver infomation
lspci  | grep -i vga

# list the driver version, csdn web link:https://blog.csdn.net/MD2017/article/details/79039490
ubuntu-drivers devices
result as following:
zhonglin@B85M-D3V-A:~/Downloads$ ubuntu-drivers devices
== /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 ==
vendor   : NVIDIA Corporation
modalias : pci:v000010DEd00001401sv00001B4Csd0000116Fbc03sc00i00
driver   : xserver-xorg-video-nouveau - distro free builtin
driver   : nvidia-384 - distro non-free recommended

sudo apt-get install nvidia-396
sudo nvidia-smi
sudo watch -n 1 nvidia-smi
sudo cat /proc/driver/nvidia/version

===================================install docker and nvidia-docker==============================================
# install docker, this process may take quite a while.
sudo apt-get install wget
sudo wget -qO- https://get.docker.com/ |sh   #O is upper alphabet
# Or maybe you can install docker-ce as the following link: recommend!!!
https://docs.docker.com/install/linux/docker-ce/ubuntu/

note: If you would like to use Docker as a non-root user, you should now consider
adding your user to the "docker" group with something like:
    sudo usermod -aG docker zhonglin
# Test docker
sudo service docker start
sudo docker run hello-world

# install nvidia-docker
sudo curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
sudo curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
sudo apt-get update
sudo apt-get install -y nvidia-docker2
sudo reboot
done!

# some command about docker and nvidia-docker
sudo docker images                                                          #list docker images
sudo docker load --input ccf_facerecognition.rar                            #load docker image
sudo docker save -o ccf_facerecognition.rar ccf_facerecognition:latest      #save docker image
sudo nvidia-docker build -t ccf_facerecognition .                           #using Dockerfile to generate image

sudo nvidia-docker run -p 8888:8888 -p 6006:6006 -v /home/zhonglin/workspace:/data -itd --name tensorflow ufoym/deepo:tensorflow-py36  /bin/bash

# some website link
https://blog.csdn.net/xiangxianghehe/article/details/81216424
https://blog.csdn.net/cdknight_happy/article/details/80819413
https://github.com/NVIDIA/nvidia-docker                 #!!!!!!!!!!!!

===============================docker images in github============================================
https://github.com/ufoym/deepo                          #recommendation. It contains almost all the training frame you want.
https://hub.docker.com/r/tensorflow/tensorflow/tags/
https://github.com/matterport/Mask_RCNN
https://hub.docker.com/r/waleedka/modern-deep-learning/

===============================docker images in github============================================
https://github.com/ufoym/deepo                          #recommendation. It contains almost all the training frame you want.
https://hub.docker.com/r/tensorflow/tensorflow/tags/

ImportError: No module named '_tkinter'
sudo apt-get install python3-tk

# set java environment
export JAVA_HOME=/opt/java/jdk1.8
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH


update-alternatives --config java

# anaconda download website and install annconda environment
https://blog.csdn.net/lijiecong/article/details/78339078
http://docs.anaconda.com/anaconda/install/linux/
https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/  # recommend
https://repo.continuum.io/archive/                      # deprecated. very slow when download
$bash ~/Anaconda3-2.3.0-Linux-x86_64.sh                 ------python3.4.3   [without jupyter]
$bash /workspace/Anaconda2-5.3.0-Linux-x86_64.sh        ------python2.7.15
$bash /workspace/Anaconda3-4.2.0-Linux-x86_64.sh        ------python3.5.2
$bash /workspace/Anaconda3-5.0.0-Linux-x86_64.sh        ------python3.6.2
$bash /workspace/Anaconda3-5.2.0-Linux-x86_64.sh        ------python3.6.5
$bash /workspace/Anaconda3-5.3.0-Linux-x86_64.sh        ------python3.6.7
https://conda.io/docs/user-guide/tasks/manage-python.html


# nvidia images with cuda and cudnn versions
https://gitlab.com/nvidia/cuda/
https://hub.docker.com/r/library/ubuntu/

# pull images from Dockerfile
docker build -f Dockerfile.jdk -t deep_env_jdk:zhonglin .

# update g++ from 4.8 to 5.x
sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install software-properties-common  #if necessary
sudo apt-get install gcc-5 g++-5
sudo ln -s /usr/bin/gcc-5 /usr/bin/gcc -f
sudo ln -s /usr/bin/g++-5 /usr/bin/g++ -f

# jupter notebook
step1: install anaconda3, if the jupyter is not exist, 'conda install jupyter' install it.
step2: vim ~/.jupyter/jupyter_notebook_config.py
            c.NotebookApp.ip = '*'
            c.NotebookApp.open_browser = False
            c.NotebookApp.token = ''
            c.NotebookApp.port = 8888
step3: jupyter notebook [path]    eg:jupyter notebook /home
step4: a)If you are not in the docker container, open browser type website: http://localhost:8888
       b)But if you are in the docker container, you should run the create the container
         with parameter -p host_port:container_port, then in browser type website: http://localhost:host_port
       create a container example:
       nvidia-docker run -p 8887:8888 -v /home/zhonglin:/host -itd --name jupyter_ana ufoym/deepo:tensorflow-py36 /bin/bash

   tip:https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/

jt -f inconsolata -t chesterish
jt -t oceans16 -f fira -fs 13 -cellw 90% -ofs 11 -dfs 11 -T
jt -t onedork -fs 95 -altp -tfs 11 -ofs 11 -nfs 115 -cellw 90% -T


# install openmpi
1.download openmpi package off-line
    https://www.open-mpi.org/software/ompi/v3.1/
2.extract target and compile
    tar -xzvf openmpi-3.1.tar.gz
    mkdir -p /usr/local/openmpi
    cd openmpi-3.1
    ./configure --prefix=/usr/local/openmpi
3.install
    make all
    make install
4.set environment in .bashrc
    vim ~/.bashrc
    export PATH=$PATH:/usr/local/openmpi/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/openmpi/lib/

    source ~/.bashrc
    ldconfig
5.test
    cd examples
    make
    mpirun -np 8 hello_c


# install python2.7 or python3.6
apt-get install software-properties-common
add-apt-repository ppa:fkrull/deadsnakes
apt-get update
apt-get install python2.7
# apt-get install python3.5

# imread
import cv2
image = cv2.imread(file_name)  # bgr 0-255
height, width, channel = image.shape

from PIL import Image
image = Image.open(file_name)  # rgb
width, height  = image.shape

import skimage
from skimage import io
image = io.imread(file_name)  #rgb 0-255
height, width, channel = image.shape

caffe.io.load_image(file_name) # rgb  0-1


# ======================pyenv install=========================2019/04/06
offical link: https://github.com/pyenv/pyenv

install steps:
1) git clone https://github.com/yyuu/pyenv.git ~/.pyenv
2) echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
3) echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
4) echo 'eval "$(pyenv init -)"' >> ~/.bashrc
5) exec $SHELL      # Restart your shell so that the path changes take effect
6) source ~/.bashrc


Note: Before run command 'pyenv install 3.6.7', install the following dependence.
0. apt-get update
1. sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
  libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
  xz-utils tk-dev

# You can run 'pyenv install --list' to check what versions can be installed.
2. pyenv install 3.6.7
3. pyenv versions
4. pyenv local(global) 3.6.7
5. exec $SHELL
6. pyenv install anaconda3-4.2.0
7. pyenv rehash

Then, you can also use conda to install tensorflow-gpu, for example
conda install tensorflow-gpu
anaconda search -t conda tensorflow-gpu
anaconda show anaconda/tensorflow-gpu # and run the last command.

Other commands, you can refer to https://github.com/pyenv/pyenv/blob/master/COMMANDS.md

pyenv local --unset

# ======================pyenv install=========================end
